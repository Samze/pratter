// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/samze/pratter/messages"
)

type FakeMessageStore struct {
	AddMessageStub        func(user string, msg messages.Message)
	addMessageMutex       sync.RWMutex
	addMessageArgsForCall []struct {
		user string
		msg  messages.Message
	}
	GetMessagesStub        func(user string) []messages.Message
	getMessagesMutex       sync.RWMutex
	getMessagesArgsForCall []struct {
		user string
	}
	getMessagesReturns struct {
		result1 []messages.Message
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessageStore) AddMessage(user string, msg messages.Message) {
	fake.addMessageMutex.Lock()
	fake.addMessageArgsForCall = append(fake.addMessageArgsForCall, struct {
		user string
		msg  messages.Message
	}{user, msg})
	fake.recordInvocation("AddMessage", []interface{}{user, msg})
	fake.addMessageMutex.Unlock()
	if fake.AddMessageStub != nil {
		fake.AddMessageStub(user, msg)
	}
}

func (fake *FakeMessageStore) AddMessageCallCount() int {
	fake.addMessageMutex.RLock()
	defer fake.addMessageMutex.RUnlock()
	return len(fake.addMessageArgsForCall)
}

func (fake *FakeMessageStore) AddMessageArgsForCall(i int) (string, messages.Message) {
	fake.addMessageMutex.RLock()
	defer fake.addMessageMutex.RUnlock()
	return fake.addMessageArgsForCall[i].user, fake.addMessageArgsForCall[i].msg
}

func (fake *FakeMessageStore) GetMessages(user string) []messages.Message {
	fake.getMessagesMutex.Lock()
	fake.getMessagesArgsForCall = append(fake.getMessagesArgsForCall, struct {
		user string
	}{user})
	fake.recordInvocation("GetMessages", []interface{}{user})
	fake.getMessagesMutex.Unlock()
	if fake.GetMessagesStub != nil {
		return fake.GetMessagesStub(user)
	} else {
		return fake.getMessagesReturns.result1
	}
}

func (fake *FakeMessageStore) GetMessagesCallCount() int {
	fake.getMessagesMutex.RLock()
	defer fake.getMessagesMutex.RUnlock()
	return len(fake.getMessagesArgsForCall)
}

func (fake *FakeMessageStore) GetMessagesArgsForCall(i int) string {
	fake.getMessagesMutex.RLock()
	defer fake.getMessagesMutex.RUnlock()
	return fake.getMessagesArgsForCall[i].user
}

func (fake *FakeMessageStore) GetMessagesReturns(result1 []messages.Message) {
	fake.GetMessagesStub = nil
	fake.getMessagesReturns = struct {
		result1 []messages.Message
	}{result1}
}

func (fake *FakeMessageStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMessageMutex.RLock()
	defer fake.addMessageMutex.RUnlock()
	fake.getMessagesMutex.RLock()
	defer fake.getMessagesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMessageStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ messages.MessageStore = new(FakeMessageStore)
